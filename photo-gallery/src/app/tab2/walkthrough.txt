Notes--


-first we installl ionic cli, native-run which will be used to run native binaries on devices 
-cordova-res will be used to generate native app icons and splash screens.

npm install -g @ionic/cli native-run cordova-res


--create an ionic angular app that uses the "TABS" starter template and adds Capacitor for native functionality.

ionic start photo-gallery tabs --type=angular --capacitor

Heree photo-gallery is the app name
change directory to app photo-gallery

PWA Elements
Some Capacitor plugins, including the Camera API, provide the web-based functionality and UI via the Ionic PWA Elements library.

It's a separate dependency, so install it next:npm install @ionic/pwa-elements

Next, import @ionic/pwa-elements by editing src/main.ts.

import { defineCustomElements } from '@ionic/pwa-elements/loader';

// Call the element loader after the platform has been bootstrapped
defineCustomElements(window);


use "ionic serve" to run the app in web browser


in the src/app folder, you will see tab1, tab2,tab3
its a blank canvas. you can make changes to transform the app into a photo gallery.

in the tab2.html you'll se ion-header, it represents tthe top navigation and toolbar, with "Tab 2" as the title in ion-title tag. We will rename the title to Photo Gallery.


we put our visual aspects of app into the ion-content tag. Here we will add a button that opens the device's camera as well as displays the image captured by the camera. 

we'll add a floating action button (FAB) to the bottom of the page as follows after the header tag ends:
<ion-content>
<ion-fab vertical="bottom" horizontal="center" slot="fixed">
    <ion-fab-button>
      <ion-icon name="camera"></ion-icon>
    </ion-fab-button>
  </ion-fab>
</ion-content>


next, we open src/app/tabs/tabs.page.html. Change the label to "Photos" and the icon name to "images" 

TAKING PHOTOS WITH THE CAMERA ----
we will use the Capacitor Camera Api to implement the "click pictures" functionality.

PHoto Service--
all the capacitor logic, the camera usage and other native features will be encapsulated in the service class.

Create a PhotoService using ionic generate command in your photo-gallery app:
ionic g service services/photo

now, we open services/photo.service.ts file and add the logic for camera functionality.

first we import capacitor dependencies and get reference to the camera, filesystem and storage plugins as:

import { Camera, CameraResultType, CameraSource, Photo } from '@capacitor/camera';
import { Filesystem, Directory } from '@capacitor/filesystem';
import { Storage } from '@capacitor/storage';


next we define a new class method, addNewToGallery, that will contain the core logic to take a device photo and save it in the fileSystem.
We start by opening the device camera
as:

public async addNewToGallery() {
  // Take a photo
  const capturedPhoto = await Camera.getPhoto({
    resultType: CameraResultType.Uri,
    source: CameraSource.Camera,
    quality: 100
  });
}


now go to tab2.page.ts and import the PhotoService class and add a method that calls the addNewToGallery method on the imported service:

import {PhotoService} from '../services/photo.service';
constructor(public photoService: PhotoService){}
addPhotoToGallery(){
    this.photoService.addNewToGallery();
}

now we open tab2.page.html and call the addPhotoToGallery() function when the FAB is tapped/clicked:

<ion-content>
  <ion-fab vertical="bottom" horizontal="center" slot="fixed">
    <ion-fab-button (click)="addPhotoToGallery()">
      <ion-icon name="camera"></ion-icon>
    </ion-fab-button>
  </ion-fab>
</ion-content>



check if everything is up and running well..
if you're facing capactor "module not found" error, just manually install the following dependencies that we added into the photo.service.ts file as:

npm install --save 
@capacitor/storage @capacitor/cli

npm install --save 
@capacitor/filesystem @capacitor/cli  

npm install --save 
@capacitor/camera @capacitor/cli

now, we move on to,
DISPLAYING PHOTOS---

