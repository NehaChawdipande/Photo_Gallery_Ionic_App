Notes--


-first we installl ionic cli, native-run which will be used to run native binaries on devices 
-cordova-res will be used to generate native app icons and splash screens.

npm install -g @ionic/cli native-run cordova-res


--create an ionic angular app that uses the "TABS" starter template and adds Capacitor for native functionality.

ionic start photo-gallery tabs --type=angular --capacitor

Heree photo-gallery is the app name
change directory to app photo-gallery

PWA Elements
Some Capacitor plugins, including the Camera API, provide the web-based functionality and UI via the Ionic PWA Elements library.

It's a separate dependency, so install it next:npm install @ionic/pwa-elements

Next, import @ionic/pwa-elements by editing src/main.ts.

import { defineCustomElements } from '@ionic/pwa-elements/loader';

// Call the element loader after the platform has been bootstrapped
defineCustomElements(window);


use "ionic serve" to run the app in web browser


in the src/app folder, you will see tab1, tab2,tab3
its a blank canvas. you can make changes to transform the app into a photo gallery.

in the tab2.html you'll se ion-header, it represents tthe top navigation and toolbar, with "Tab 2" as the title in ion-title tag. We will rename the title to Photo Gallery.


we put our visual aspects of app into the ion-content tag. Here we will add a button that opens the device's camera as well as displays the image captured by the camera. 

we'll add a floating action button (FAB) to the bottom of the page as follows after the header tag ends:
<ion-content>
<ion-fab vertical="bottom" horizontal="center" slot="fixed">
    <ion-fab-button>
      <ion-icon name="camera"></ion-icon>
    </ion-fab-button>
  </ion-fab>
</ion-content>


next, we open src/app/tabs/tabs.page.html. Change the label to "Photos" and the icon name to "images" 

TAKING PHOTOS WITH THE CAMERA ----
we will use the Capacitor Camera Api to implement the "click pictures" functionality.

PHoto Service--
all the capacitor logic, the camera usage and other native features will be encapsulated in the service class.

Create a PhotoService using ionic generate command in your photo-gallery app:
ionic g service services/photo

now, we open services/photo.service.ts file and add the logic for camera functionality.

first we import capacitor dependencies and get reference to the camera, filesystem and storage plugins as:

import { Camera, CameraResultType, CameraSource, Photo } from '@capacitor/camera';
import { Filesystem, Directory } from '@capacitor/filesystem';
import { Storage } from '@capacitor/storage';


next we define a new class method, addNewToGallery, that will contain the core logic to take a device photo and save it in the fileSystem.
We start by opening the device camera
as:

public async addNewToGallery() {
  // Take a photo
  const capturedPhoto = await Camera.getPhoto({
    resultType: CameraResultType.Uri,
    source: CameraSource.Camera,
    quality: 100
  });
}


now go to tab2.page.ts and import the PhotoService class and add a method that calls the addNewToGallery method on the imported service:

import {PhotoService} from '../services/photo.service';
constructor(public photoService: PhotoService){}
addPhotoToGallery(){
    this.photoService.addNewToGallery();
}

now we open tab2.page.html and call the addPhotoToGallery() function when the FAB is tapped/clicked:

<ion-content>
  <ion-fab vertical="bottom" horizontal="center" slot="fixed">
    <ion-fab-button (click)="addPhotoToGallery()">
      <ion-icon name="camera"></ion-icon>
    </ion-fab-button>
  </ion-fab>
</ion-content>



check if everything is up and running well..
if you're facing capactor "module not found" error, just manually install the following dependencies that we added into the photo.service.ts file as:

npm install --save 
@capacitor/storage @capacitor/cli

npm install --save 
@capacitor/filesystem @capacitor/cli  

npm install --save 
@capacitor/camera @capacitor/cli

now, we move on to,
DISPLAYING PHOTOS---


we create a new interface called Photo outside the PhotoService class definition. In this interface we store our photo metadata

export interface Photo{
  filepath:string;
  webviewPath:string;
}

at the top of the file we create an array of photos which will have reference to each photo captured with camera

In the addNewToGallery function we add the newly captured photo to Photos array:

this.photos.unshift({
  filepath:"soon...",
  webviewPath:capturedPhoto.webPath
});


next in tab2.page.html to displat image on screen. 
Add a Grid component and loop through each photo in the photos array inside the PhotoService, adding an ion-img (image component) tag for each. Point the src at photo's path:

<!-- image grid system -->

  <ion-content>
    <ion-grid>
      <ion-row>
        <ion-col size="6" 
          *ngFor="let photo of photoService.photos; index as position">

        <ion-img [src]="photo.webviewPath">
        </ion-img>
        </ion-col>
      </ion-row>
    </ion-grid>
  </ion-content>


--check if everything is working fine and then move forward..


-SAVING PHOTOS ON FILE system

up until now the code we made does not store the images permanently, so when the app is closed the images are lost. to correct this, we will use the filesystem Api.


add a new savePicture(), in the PhotoService class (src/app/services/photo.service.ts). We pass in the cameraPhoto object, which represents the newly captured device photo:

private async savePicture(cameraPhoto: CameraPhoto) { }

use this in addNewToGallery():
 // Save the picture and add it to photo collection
  const savedImageFile = await this.savePicture(capturedPhoto);
  this.photos.unshift(savedImageFile);


use the Capacitor Filesystem API to save the photo to the filesystem. To start, convert the photo to base64 format, then feed the data to the Filesystem’s writeFile function. 

write this inside savePicture()
private async savePicture(cameraPhoto: CameraPhoto) {
  // Convert photo to base64 format, required by Filesystem API to save
  const base64Data = await this.readAsBase64(cameraPhoto);

  // Write the file to the data directory
  const fileName = new Date().getTime() + '.jpeg';
  const savedFile = await Filesystem.writeFile({
    path: fileName,
    data: base64Data,
    directory: Directory.Data
  });

  // Use webPath to display the new image instead of base64 since it's
  // already loaded into memory
  return {
    filepath: fileName,
    webviewPath: cameraPhoto.webPath
  };
}


readAsBase64() is helper function , it requires a small amount of platform-specific code/logic 
for web we use:

private async readAsBase64(cameraPhoto: CameraPhoto) {
  // Fetch the photo, read as a blob, then convert to base64 format
  const response = await fetch(cameraPhoto.webPath!);
  const blob = await response.blob();

  return await this.convertBlobToBase64(blob) as string;
}

convertBlobToBase64 = (blob: Blob) => new Promise((resolve, reject) => {
  const reader = new FileReader;
  reader.onerror = reject;
  reader.onload = () => {
      resolve(reader.result);
  };
  reader.readAsDataURL(blob);
});


Obtaining the camera photo as base64 format on the web appears to be a bit trickier than on mobile. In reality, we’re just using built-in web APIs: fetch() as a neat way to read the file into blob format, then FileReader’s readAsDataURL() to convert the photo blob to base64.


---LOADING PHOTOS FROM FILESYSTEM

we use capacitor storage api to store array of photos in a key-value store

define a variable that will act as the key for store:


  //variable which will act as key for the store
  private PHOTO_STORAGE : string ="photos";


then at the end of the addNewToGallery function add a call to Storage.set() to save the Photos array. By adding it here, the Photos array is stored each time new photo is taken. This way all photo data is saved.

  Storage.set({
    key:this.PHOTO_STORAGE,
    value: JSON.stringify(this.photos)
  });

Now that the photos are saved we create a loadSaved() to retrieve the data. use the same key to retrieve the photos array in JSON format and parse it into an array:


  //loading saved photos:
  public async loadSaved(){
    //retrieve cached photo array data
    const photoList = await Storage.get({
      key: this.PHOTO_STORAGE
    });
    this.photos = JSON.parse(photoList.value) || [];
  }

On mobile (coming up next!), we can directly set the source of an image tag - <img src="x" /> - to each photo file on the Filesystem, displaying them automatically. On the web, however, we must read each image from the Filesystem into base64 format, using a new base64 property on the Photo object. This is because the Filesystem API uses IndexedDB under the hood.
add the following to the loadSaved():

  // Display the photo by reading into base64 format
for (let photo of this.photos) {
  // Read each saved photo's data from the Filesystem
  const readFile = await Filesystem.readFile({
      path: photo.filepath,
      directory: Directory.Data
  });

  // Web platform only: Load the photo as base64 data
  photo.webviewPath = `data:image/jpeg;base64,${readFile.data}`;
}

next, call this new function in tab2.page.ts so that when the user first navigates to Tab2, all photos are loaded and displayed on the screen 

    async ngOnInit(){
      await this.photoService.loadSaved();
    }


--ADDING MOBILE

the app will be complete when it is able to run on ios, android and the web using a single codebase

We use PLatform API for this purpose 

import the platform api in photo.service.ts, it will be used to retrieve information about current device. 

  import {Platform} from '@ionic/angular';

then add the following changes to the constructor:

    constructor(platform:Platform){
      this.platform=platform; }

Now we will first update the photo saving functionality to support mobile.
In readAsBase64() function we check the platform on which the app is running on. 

-If its "hybrid" (i.e. Capacitor or Cordova, two native runtimes): then read the photo file into base64 format using fileSystem.readFile()
-else use same logic as before when running the app on web.

Change the readAsBase64 function as follows:

    private async readAsBase64(cameraPhoto: CameraPhoto) {
    // "hybrid" will detect Cordova or Capacitor
      if (this.platform.is('hybrid')) {
        // Read the file into base64 format
        const file = await Filesystem.readFile({
          path: cameraPhoto.path
        });

        return file.data;
      }
      else {
        // Fetch the photo, read as a blob, then convert to base64 format
        const response = await fetch(cameraPhoto.webPath);
        const blob = await response.blob();

        return await this.convertBlobToBase64(blob) as string;
      }
    }

next, update savePicture():
-When running on mobile: set filepath to result of writeFile() op - savedFile.uri
-when setting the webviewPath, use special Capacitor.convertFileSrc().

change the savePicture() as follows:

  // Save picture to file on device
  private async savePicture(cameraPhoto: CameraPhoto) {
    // Convert photo to base64 format, required by Filesystem API to save
    const base64Data = await this.readAsBase64(cameraPhoto);

    // Write the file to the data directory
    const fileName = new Date().getTime() + '.jpeg';
    const savedFile = await Filesystem.writeFile({
      path: fileName,
      data: base64Data,
      directory: Directory.Data
    });

    if (this.platform.is('hybrid')) {
      // Display the new image by rewriting the 'file://' path to HTTP
      // Details: https://ionicframework.com/docs/building/webview#file-protocol
      return {
        filepath: savedFile.uri,
        webviewPath: Capacitor.convertFileSrc(savedFile.uri),
      };
    }
    else {
      // Use webPath to display the new image instead of base64 since it's
      // already loaded into memory
      return {
        filepath: fileName,
        webviewPath: cameraPhoto.webPath
      };
    }
  }


Next, the loadSaved() function; on mobile, we can directly set the source of an img tag - <img src ="z"> - to each photo on the Filesystem, and display them automatically.

so, Only the web requires reading each img from Filesystem into base64 format. update loadSaved() to add an if statement around fileSystem code.

    public async loadSaved() {
      // Retrieve cached photo array data
      const photoList = await Storage.get({ key: this.PHOTO_STORAGE });
      this.photos = JSON.parse(photoList.value) || [];

      // Easiest way to detect when running on the web:
      // “when the platform is NOT hybrid, do this”
      if (!this.platform.is('hybrid')) {
        // Display the photo by reading into base64 format
        for (let photo of this.photos) {
          // Read each saved photo's data from the Filesystem
          const readFile = await Filesystem.readFile({
              path: photo.filepath,
              directory: Directory.Data
          });

          // Web platform only: Load the photo as base64 data
          photo.webviewPath = `data:image/jpeg;base64,${readFile.data}`;
        }
      }
    }

now, DEPLOYING MOBILE---------

setting up capacitor--
make a fresh build of the project.

  ionic build // everytime you build , web directory www is updated.

now, create both ios and android projects:

  ionic cap add ios
  ionic cap add android

Note that whenever the ionic build command is run, updtes are made to www directory; so, we need to copy those changes to native project using the command:
  ionic cap copy


After making updates to the native portion of the code (such as adding a new plugin), use the sync command:

  ionic cap sync


--ANDROID DEPLOYMENT---

In this project we have done android deployment:

First, run the Capacitor open command, which opens the native Android project in Android Studio:

  ionic cap open android

we must enable the correct permissions to use the Camera. Configure these in the AndroidManifest.xml file. Android Studio will likely open this file automatically, but in case it doesn't, locate it under android/app/src/main/.

Scroll to the Permissions section and ensure these entries are included:

<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />


Save the file. With permissions in place, we are ready to try out the app on a real device! Connect an Android device to your computer. Within Android Studio, click the "Run" button, select the attached Android device, then click OK to build, install, and launch the app on your device.

